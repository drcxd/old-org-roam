:PROPERTIES:
:ID:       3e87032c-4614-4507-92c3-6eb3f86aa7c3
:END:
#+title: Call Stack
#+filetags: :computer-science:operating-system:

A call stack is a stack used in a specific way to implement /function
call/. Since a stack is a FIFO data structure, it is similar to how
function invocation behaves, so it is chose as the underlying data
structure for the mechanism.

Each [[id:7ba23e43-9f67-4502-a54b-e6a2bd647371][thread]] has its own call stack. This is obvious considering that a
thread encapsulates a running stream of machine language execution.

# TODO: this paragraph is better placed in zettle named "Function
# Call" or "Stack Frame"
Each function allocates a frame onto the stack when it gets called,
usually by moving the stack top pointer. The frame is pushed onto the
top of the stack. Inside each frame, the operating system stores the
return address, which is the address of the instruction to be executed
after the function returns. When a function finishes its task, the
operating system just fetch the return address, move the stack top
pointer back, and jump to the return address.
