:PROPERTIES:
:ID:       e5bc20c7-0c80-483e-9513-fd1215206983
:END:
#+title: General Idea of Implementing a Spin Lock
#+filetags: :computer-science:concurrency:

There is a general pattern behind several different ways to use [[id:a36d93f8-6e97-45a7-950a-6ec170d558d7][Atomic
Read-Modify-Write]] instructions to implement a spin lock.

First, the data of a spin lock is a simple boolean variable. If its
value is true, it indicates that the spin lock is acquired or
locked. If its value is false, it means the spin lock is released or
unlocked.

To atomically acquire a spin lock, we need to use a [[id:a36d93f8-6e97-45a7-950a-6ec170d558d7][Atomic
Read-Modify-Write]] instrcution to read the boolean value. If the value
is true, this means the locked is acquired by other [[id:7ba23e43-9f67-4502-a54b-e6a2bd647371][Thread]]s, we have
to try agian, usually in a loop. If the value is false, we set it to
true which indicates that the lock is acquired by the running thread
and we can break out from the loop. Since the atomicity of the
operation is provided by the CPU, no other threads can interrupt this
process. Thus no two threads can concurrently set the boolean variable
to true and think it has acquired the lock at the same time.
